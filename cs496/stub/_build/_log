### Starting build.
# Target: repl.ml.depends, tags: { bin_annot, extension:ml, file:repl.ml, ocaml, ocamldep, package(oUnit), quiet }
ocamlfind ocamldep -package oUnit -modules repl.ml > repl.ml.depends
# Target: ast.ml.depends, tags: { bin_annot, extension:ml, file:ast.ml, ocaml, ocamldep, package(oUnit), quiet }
ocamlfind ocamldep -package oUnit -modules ast.ml > ast.ml.depends
# Target: ds.ml.depends, tags: { bin_annot, extension:ml, file:ds.ml, ocaml, ocamldep, package(oUnit), quiet }
ocamlfind ocamldep -package oUnit -modules ds.ml > ds.ml.depends
# Target: ast.cmo, tags: { bin_annot, byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, package(oUnit), quiet }
ocamlfind ocamlc -c -bin-annot -package oUnit -o ast.cmo ast.ml
# Target: interp.ml.depends, tags: { bin_annot, extension:ml, file:interp.ml, ocaml, ocamldep, package(oUnit), quiet }
ocamlfind ocamldep -package oUnit -modules interp.ml > interp.ml.depends
# Target: ds.cmo, tags: { bin_annot, byte, compile, extension:cmo, extension:ml, file:ds.cmo, file:ds.ml, implem, ocaml, package(oUnit), quiet }
ocamlfind ocamlc -c -bin-annot -package oUnit -o ds.cmo ds.ml
# Target: lexer.mll, tags: { bin_annot, extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, package(oUnit), quiet }
/usr/bin/ocamllex.opt -q lexer.mll
# Target: lexer.ml.depends, tags: { bin_annot, extension:ml, file:lexer.ml, ocaml, ocamldep, package(oUnit), quiet }
ocamlfind ocamldep -package oUnit -modules lexer.ml > lexer.ml.depends
# Target: parser.mly.depends, tags: { bin_annot, extension:mly, file:parser.mly, infer, menhir_ocamldep, ocaml, ocamldep, package(oUnit), quiet }
menhir --raw-depend --ocamldep 'ocamlfind ocamldep -modules' parser.mly > parser.mly.depends
# Target: parser.mly, tags: { bin_annot, byte, compile, extension:ml, extension:mly, file:parser.ml, file:parser.mly, infer, menhir, ocaml, package(oUnit), parser, quiet }
menhir --ocamlc 'ocamlfind ocamlc -bin-annot -package oUnit' --infer parser.mly
# Target: parser.mli.depends, tags: { bin_annot, extension:mli, file:parser.mli, ocaml, ocamldep, package(oUnit), quiet }
ocamlfind ocamldep -package oUnit -modules parser.mli > parser.mli.depends
# Target: parser.cmi, tags: { bin_annot, byte, compile, extension:mli, file:parser.mli, interf, ocaml, package(oUnit), quiet }
ocamlfind ocamlc -c -bin-annot -package oUnit -o parser.cmi parser.mli
# Target: store.mli.depends, tags: { bin_annot, extension:mli, file:store.mli, ocaml, ocamldep, package(oUnit), quiet }
ocamlfind ocamldep -package oUnit -modules store.mli > store.mli.depends
# Target: lexer.cmo, tags: { bin_annot, byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, package(oUnit), quiet }
ocamlfind ocamlc -c -bin-annot -package oUnit -o lexer.cmo lexer.ml
# Target: store.cmi, tags: { bin_annot, byte, compile, extension:mli, file:store.mli, interf, ocaml, package(oUnit), quiet }
ocamlfind ocamlc -c -bin-annot -package oUnit -o store.cmi store.mli
# Target: interp.cmo, tags: { bin_annot, byte, compile, extension:cmo, extension:ml, file:interp.cmo, file:interp.ml, implem, ocaml, package(oUnit), quiet }
ocamlfind ocamlc -c -bin-annot -package oUnit -o interp.cmo interp.ml
# Target: repl.cmo, tags: { bin_annot, byte, compile, extension:cmo, extension:ml, file:repl.cmo, file:repl.ml, implem, ocaml, package(oUnit), quiet }
ocamlfind ocamlc -c -bin-annot -package oUnit -o repl.cmo repl.ml
# Target: parser.ml.depends, tags: { bin_annot, extension:ml, file:parser.ml, ocaml, ocamldep, package(oUnit), quiet }
ocamlfind ocamldep -package oUnit -modules parser.ml > parser.ml.depends
# Target: store.ml.depends, tags: { bin_annot, extension:ml, file:store.ml, ocaml, ocamldep, package(oUnit), quiet }
ocamlfind ocamldep -package oUnit -modules store.ml > store.ml.depends
# Target: parser.cmo, tags: { bin_annot, byte, compile, extension:cmo, extension:ml, file:parser.cmo, file:parser.ml, implem, ocaml, package(oUnit), quiet }
ocamlfind ocamlc -c -bin-annot -package oUnit -o parser.cmo parser.ml
# Target: store.cmo, tags: { bin_annot, byte, compile, extension:cmo, extension:ml, file:store.cmo, file:store.ml, implem, ocaml, package(oUnit), quiet }
ocamlfind ocamlc -c -bin-annot -package oUnit -o store.cmo store.ml
# Target: repl.byte, tags: { bin_annot, byte, dont_link_with, extension:byte, file:repl.byte, link, ocaml, package(oUnit), program, quiet }
ocamlfind ocamlc -linkpkg -package oUnit ast.cmo ds.cmo parser.cmo lexer.cmo store.cmo interp.cmo repl.cmo -o repl.byte
# Compilation successful.
